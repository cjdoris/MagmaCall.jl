var documenterSearchIndex = {"docs":
[{"location":"guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"guide/#Syntax","page":"Guide","title":"Syntax","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"The following tables gives the mapping between Magma and Julia syntax.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Magma Julia\nr := Intrinsic(x, y: opt:=z) r = magf.Intrinsic(x, y, opt=z)\nr, s := Intrinsic(x) r, s = magf2.Intrinsic(x)\nR<x,y> := Intrinsic(p, q) R, x, y = magg.Intrinsic((:x, :y), p, q)\nIntrinsicProcedure(x) magp.IntrinsicProcedure(x)\nIntrinsicProcedure(~x, y) magp1.IntrinsicProcedure(x, y) or magp.IntrinsicProcedure(MagmaRef(x), y)\nSomeType magt.SomeType\nx + y magadd(x, y) or x + y\nx - y magsub(x, y) or x - y\nx * y magmul(x, y) or x * y\nx / y magtruediv(x, y) or x / y\nx ^ y magpow(x, y) or x ^ y\nx diff y magdiff(x, y) or setdiff(x, y)\nx div y magdiv(x, y) or div(x, y)\nx join y magjoin(x, y) or union(x, y)\nx meet y magmeet(x, y) or intersect(x, y)\nx mod y magmod(x, y) or mod(x, y)\nx sdiff y magsdiff(x, y) or symdiff(x, y)\nx cat y magcat(x, y) or cat(x, y)\nx eq y mageq(x, y) or x == y\nx ne y magne(x, y) or x != y\nx cmpeq y magcmpeq(x, y)\nx cmpne y magcmpne(x, y)\nx le y magle(x, y) or x <= y\nx lt y maglt(x, y) or x < y\nx ge y magge(x, y) or x >= y\nx gt y maggt(x, y) or x > y\nx in y magin(x, y) or x in y\nx notin y magnotin(x, y)\nx adj y magadj(x, y)\nx notadj y magnotadj(x, y)\nx subset y magsubset(x, y) or issubset(x, y)\nx notsubset y magnotsubset(x, y)\n&+ x magsum(x) or sum(x)\n&* x magprod(x) or prod(x)\n&and x magreduceand(x)\n&or x magreduceor(x)\n&join x magreducejoin(x)\n&meet x magreducemeet(x)\n&cat x magreducecat(x)\n[* a, b, c *] maglist((a, b, c))\n< a, b, c > magtuple((a, b, c))\n[ a, b, c ] magseq((a, b, c))\n[ U | a, b, c ] magseq((a, b, c), universe=U)\n[ a..b by c] magseq(a:c:b)\n{ a, b, c } magset((a, b, c))\n{* a, b, c *} magmset((a, b, c))\n{@ a, b, c @} magiset((a, b, c))\nprint x magprint(io, x)\nprint x: Magma magprint(io, x, :magma)\nSprint(x, \"Magma\") magsprint(x, :magma)\nx[i, j] maggetindex(x, i, j) or x[i, j]\nx[i, j] := y magsetindex!(x, y, i, j) or x[i, j] = y\n# x maglength(x) (or length(x) provided the result is an integer)\nx @ f magimage(x, f)\nx @@ f magpreimage(x, f)\nS ! x magcoerce(S, x)\nS.n maggen(S, n)\nx`attr maggetattr(x, :attr) or x.attr\nx`attr := y magsetattr!(x, :attr, y) or x.attr = y\nrecformat<r, s:RngInt> magrecformat(:r, :s=>:RngInt)\nrec<fmt | r:=x> magrec(fmt, r=x)\n? query maghelp(\"query\")\n...any expression... mag\"...\" (supporting $ interpolation)","category":"page"},{"location":"guide/#Conversion-to-Magma","page":"Guide","title":"Conversion to Magma","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"When passed as arguments to Magma functions the following conversions are made from Julia types to Magma types:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Julia Magma\nBool BoolElt\nInteger RngIntElt\nRational FldRatElt\nReal FldReElt\nComplex FldComElt\nAbstractString MonStgElt\nAbstractChar MonStgElt of length 1\nAbstractVector SeqEnum\nAbstractSet SetEnum\nAbstractDict Assoc\nTuple Tup\nNamedTuple Rec","category":"page"},{"location":"guide/#Conversion-to-Julia","page":"Guide","title":"Conversion to Julia","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Call magconvert(T, x) to convert the Magma value x to a Julia T.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The following table gives the supported conversions. These are in preference order: the first type in each row that is a subtype of T is the return type from magconvert.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Magma Julia\nRngIntElt (integer) BigInt, Int, UInt, Integer, Rational, Real, MagmaOTPInteger\nFltRatElt (rational) Rational, Real, MagmaOTPRational\nMonStgElt (string) String, AbstractString, Char, AbstractChar, Vector{UInt8}, AbstractVector{UInt8}, MagmaOTPString\nList (list) Vector, AbstractVector, MagmaOTPList\nSeqEnum (sequence) Vector, AbstractVector, MagmaOTPSequence\nSetEnum (set) Set, AbstractSet, Vector, AbstractVector, MagmaOTPSet","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"For sequences and sets, the result depends on whether it is a null sequence/set (in which case MagmaOTPNullSequence might be returned) or is a range (in which case a StepRangeLen is the preferred return type, and MagmaOTPRangeSequence is the least preferred).","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The MagmaOTP* types are exact representations of objects from the Magma Object Transfer Protocol. They are all subtypes of MagmaOTPValue. They have no extra semantics, so are always the least-preferred option. Not included in the table are structures themselves (e.g. RngInt (ring of integers), MonStg (strings)) which are always converted to a corresponding MagmaOTPStr.","category":"page"},{"location":"guide/#Calling-functions-and-procedures","page":"Guide","title":"Calling functions and procedures","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"In Magma, there is no syntactic difference between function calls and procedure calls, so in MagmaCall, we must make the distinction explicit.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The simplest way to call an intrinsic function is to use the syntax magf.Intrinsic(...). Similarly magp.Intrinsic(...) is a procedure call (returning nothing) and magf2.Intrinsic(...) is a function call returning a pair of values.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"For each \"calling convention\" C in the following table, there is a corresponding magC object which can be accessed in this way.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Convention Interpretation\np Procedure call. Return nothing.\nf Function call. Return a MagmaObject.\nfN Function call with N return values. Return a tuple of MagmaObject.\ni Function call returning an integer. Return an Int.\nb Function call returning a boolean. Return a Bool.\ng Function call with generators, so that R, x, y = magg.Intrinsic((:x, :y), ...) is equivalent to R<x,y> := Intrinsic(...) in Magma.\nm Function call returning a bool and a value. Return nothing if the bool is false, else the value.\npN Procedure call, passing the Nth argument by reference. Return nothing.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The way this works is that magC.Intrinsic is a MagmaCallable{:C}, which is a MagmaValue with function call syntax overloaded, so that magC.Intrinsic(...) is equivalent to magcall(Val(:C), magC.Intrinsic, ...). magcall is the worker function where calling conventions are implemented.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"If you have a Magma value f and need to call it, then f(...) will not work because the desired calling convention is unknown. Instead, use magcall(Val(:C), f, ...) or magcallC(f, ...). Alternatively, you can explicitly wrap it as MagmaCallable{:C}(f) and call that.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Note also that mag\"...\"C is equivalent to MagmaCallable{:C}(mag\"...\").","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The following are equivalent:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"magf.PolynomialRing(Z)\nmagcallf(:PolynomialRing, Z)\nmagcall(Val(:f), :PolynomialRing, Z)\nMagmaCallable{:f}(MagmaIntrinsic(:PolynomialRing))(Z)\nmag\"PolynomialRing\"f(Z)\nmag\"PolynomialRing($Z)\"","category":"page"},{"location":"how/#How-it-works","page":"How it works","title":"How it works","text":"","category":"section"},{"location":"how/","page":"How it works","title":"How it works","text":"We keep a Magma interpreter around for the whole Julia session, send it expressions to evaluate, and read its output.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"Because every operation involves sending and receiving synchronous IO messages, which also invoke the Magma interpreter (and parser, etc.), this is all very slow, on the order of 1ms per operation. Hence the Caveat.","category":"page"},{"location":"how/#Interacting-with-the-interpreter","page":"How it works","title":"Interacting with the interpreter","text":"","category":"section"},{"location":"how/","page":"How it works","title":"How it works","text":"Calling MagmaCall.interact(f) will wait for the interpreter to become available, lock it, call f(io) where io is the interpreter process, unlock it, and return whatever f(io) returned. In order to support asyncronous interaction (in particular, the Julia garbage collector is asyncronous, and we have finalizers that delete Magma objects), the function f must complete everything it is doing and leave the interpreter in a state ready for the next operation.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"A typical interaction looks like this:","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"interact() do io\n    putcmd(io, ..., err=true)\n    for line in eachlinetotoken(io, missing)\n        # process output...\n    end\n    checkerr(io)\nend","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"Here, putcmd sends a command to the interpreter. This essentially is the same as print, except that a semicolon is appended automatically. Further, if err=true (recommended) then the whole thing is wrapped in a try ... catch block to support checkerr.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"Next, we must process all output that occurred as a result of the command. Typically we do this by generating a random token, instructing Magma to print it, then reading everything up to that token. In this example, eachlinetotoken(io, tok) is an iterator over each line of output until the token tok is observed. If tok is missing, then a new token is randomly generated and sent to Magma first.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"There are also skiptotoken (ignores everything), echototoken (prints each line to a given IO stream) and readtotoken (reads everything as a string).","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"After all output is processed, the call to checkerr(io) checks to see if an error occurred. If so, an appropriate error is raised.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"Since we must process all output, we cannot break out of the loop early. Alternatively, we can call skiptotoken(tok) then break.","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"If the loop might throw an error, it must be caught, any remaining output must be processed (e.g. with skiptotoken), and checkerr called before rethrowing it:","category":"page"},{"location":"how/","page":"How it works","title":"How it works","text":"interact() do io\n    putcmd(io, ..., err=true)\n    tok = puttoken()\n    try\n        for line in eachlinetotoken(io, tok)\n            # process output...\n        end\n    catch err\n        skiptotoken(io, tok)\n        checkerr(io)\n        rethrow(err)\n    end\n    checkerr(io)\nend","category":"page"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Calling-functions-and-procedures","page":"API Reference","title":"Calling functions and procedures","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magcall\nmagcallp\nmagcallf\nmagcallf2\nmagcallf3\nmagcallf4\nmagcallf5\nmagcallf6\nmagcallf7\nmagcallf8\nmagcalli\nmagcallb\nmagcallp1\nmagcallp2\nmagcallp3\nmagcallp4\nmagcallg\nmagcallm","category":"page"},{"location":"reference/#MagmaCall.magcall","page":"API Reference","title":"MagmaCall.magcall","text":"magcall(Val(C), f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options according to calling convention C.\n\nIf f is a Symbol, then it is interpreted as the name of a Magma intrinsic.\n\nC may be:\n\n:p: f is a procedure and nothing is returned. Note that if f is actually a function, its return value will be printed.\n:f: f is a function and its first return value is returned.\n:fN: f is a function and its first N return values are returned as a tuple.\n:b: f is a function returning a boolean, which is returned as a Bool.\n:i: f is a function returning an integer, which is returned as an Int.\n:g: f is a function returning a structure S. args[1] is a tuple of generator names, which are applied to S. Returns a tuple of S and generator names.\n:pN: Same as :p (procedure) but the Nth argument is passed by reference.\n\nEquivalently, you can call magcallC(f, args...; opts...) or magC.f(args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallp","page":"API Reference","title":"MagmaCall.magcallp","text":"magcallp(f, args...; opts...)\n\nCall the Magma procedure f with the given arguments and keyword options.\n\nEquivalent to magcall(Val(:p), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf","page":"API Reference","title":"MagmaCall.magcallf","text":"magcallf(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first return value.\n\nEquivalent to magcall(Val(:f), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf2","page":"API Reference","title":"MagmaCall.magcallf2","text":"magcallf2(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first two return values.\n\nEquivalent to magcall(Val(:f2), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf3","page":"API Reference","title":"MagmaCall.magcallf3","text":"magcallf3(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first three return values.\n\nEquivalent to magcall(Val(:f3), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf4","page":"API Reference","title":"MagmaCall.magcallf4","text":"magcallf4(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first four return values.\n\nEquivalent to magcall(Val(:f4), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf5","page":"API Reference","title":"MagmaCall.magcallf5","text":"magcallf5(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first five return values.\n\nEquivalent to magcall(Val(:f5), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf6","page":"API Reference","title":"MagmaCall.magcallf6","text":"magcallf6(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first six return values.\n\nEquivalent to magcall(Val(:f6), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf7","page":"API Reference","title":"MagmaCall.magcallf7","text":"magcallf7(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first seven return values.\n\nEquivalent to magcall(Val(:f7), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallf8","page":"API Reference","title":"MagmaCall.magcallf8","text":"magcallf8(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Return the first eight return values.\n\nEquivalent to magcall(Val(:f8), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcalli","page":"API Reference","title":"MagmaCall.magcalli","text":"magcalli(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. It must return an integer, which is returned as an Int.\n\nEquivalent to magcall(Val(:i), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallb","page":"API Reference","title":"MagmaCall.magcallb","text":"magcallb(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. It must return a boolean, which is returned as a Bool.\n\nEquivalent to magcall(Val(:b), f, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallp1","page":"API Reference","title":"MagmaCall.magcallp1","text":"magcallp1(f, args...; opts...)\n\nCall the Magma procedure f with the given arguments and keyword options, passing the first argument by reference.\n\nEquivalent to magcallp1(Val(:p1), args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallp2","page":"API Reference","title":"MagmaCall.magcallp2","text":"magcallp2(f, args...; opts...)\n\nCall the Magma procedure f with the given arguments and keyword options, passing the second argument by reference.\n\nEquivalent to magcallp2(Val(:p2), args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallp3","page":"API Reference","title":"MagmaCall.magcallp3","text":"magcallp3(f, args...; opts...)\n\nCall the Magma procedure f with the given arguments and keyword options, passing the third argument by reference.\n\nEquivalent to magcallp3(Val(:p3), args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallp4","page":"API Reference","title":"MagmaCall.magcallp4","text":"magcallp4(f, args...; opts...)\n\nCall the Magma procedure f with the given arguments and keyword options, passing the fourth argument by reference.\n\nEquivalent to magcallp4(Val(:p4), args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallg","page":"API Reference","title":"MagmaCall.magcallg","text":"magcallg(f, names, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. Assign the given names to the result. Return a tuple of the result and the generators.\n\nEquivalent to magcall(Val(:g), f, names, args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcallm","page":"API Reference","title":"MagmaCall.magcallm","text":"magcallm(f, args...; opts...)\n\nCall the Magma function f with the given arguments and keyword options. If the first return value is true, return the second return value, else return nothing.\n\nEquivalent to magcall(Val(:m), args...; opts...).\n\n\n\n\n\n","category":"function"},{"location":"reference/#Binary-operators","page":"API Reference","title":"Binary operators","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magadd\nmagsub\nmagmul\nmagtruediv\nmagpow\nmagdiff\nmagdiv\nmagjoin\nmagmeet\nmagmod\nmagsdiff\nmagcat\nmageq\nmagne\nmagcmpeq\nmagcmpne\nmagle\nmaglt\nmagge\nmaggt\nmagin\nmagnotin\nmagadj\nmagnotadj\nmagsubset\nmagnotsubset","category":"page"},{"location":"reference/#MagmaCall.magadd","page":"API Reference","title":"MagmaCall.magadd","text":"magadd(x, y)\n\nEquivalent to x + y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsub","page":"API Reference","title":"MagmaCall.magsub","text":"magsub(x, y)\n\nEquivalent to x - y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magmul","page":"API Reference","title":"MagmaCall.magmul","text":"magmul(x, y)\n\nEquivalent to x * y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magtruediv","page":"API Reference","title":"MagmaCall.magtruediv","text":"magtruediv(x, y)\n\nEquivalent to x / y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magpow","page":"API Reference","title":"MagmaCall.magpow","text":"magpow(x, y)\n\nEquivalent to x ^ y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magdiff","page":"API Reference","title":"MagmaCall.magdiff","text":"magdiff(x, y)\n\nEquivalent to x diff y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magdiv","page":"API Reference","title":"MagmaCall.magdiv","text":"magdiv(x, y)\n\nEquivalent to x div y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magjoin","page":"API Reference","title":"MagmaCall.magjoin","text":"magjoin(x, y)\n\nEquivalent to x join y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magmeet","page":"API Reference","title":"MagmaCall.magmeet","text":"magmeet(x, y)\n\nEquivalent to x meet y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magmod","page":"API Reference","title":"MagmaCall.magmod","text":"magmod(x, y)\n\nEquivalent to x mod y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsdiff","page":"API Reference","title":"MagmaCall.magsdiff","text":"magsdiff(x, y)\n\nEquivalent to x sdiff y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcat","page":"API Reference","title":"MagmaCall.magcat","text":"magcat(x, y)\n\nEquivalent to x cat y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.mageq","page":"API Reference","title":"MagmaCall.mageq","text":"mageq(x, y)\n\nTrue if x eq y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magne","page":"API Reference","title":"MagmaCall.magne","text":"magne(x, y)\n\nTrue if x ne y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcmpeq","page":"API Reference","title":"MagmaCall.magcmpeq","text":"magcmpeq(x, y)\n\nTrue if x cmpeq y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcmpne","page":"API Reference","title":"MagmaCall.magcmpne","text":"magcmpne(x, y)\n\nTrue if x cmpne y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magle","page":"API Reference","title":"MagmaCall.magle","text":"magle(x, y)\n\nTrue if x le y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maglt","page":"API Reference","title":"MagmaCall.maglt","text":"maglt(x, y)\n\nTrue if x lt y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magge","page":"API Reference","title":"MagmaCall.magge","text":"magge(x, y)\n\nTrue if x ge y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maggt","page":"API Reference","title":"MagmaCall.maggt","text":"maggt(x, y)\n\nTrue if x gt y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magin","page":"API Reference","title":"MagmaCall.magin","text":"magin(x, y)\n\nTrue if x in y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magnotin","page":"API Reference","title":"MagmaCall.magnotin","text":"magnotin(x, y)\n\nTrue if x notin y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magadj","page":"API Reference","title":"MagmaCall.magadj","text":"magadj(x, y)\n\nTrue if x adj y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magnotadj","page":"API Reference","title":"MagmaCall.magnotadj","text":"magnotadj(x, y)\n\nTrue if x notadj y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsubset","page":"API Reference","title":"MagmaCall.magsubset","text":"magsubset(x, y)\n\nTrue if x subset y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magnotsubset","page":"API Reference","title":"MagmaCall.magnotsubset","text":"magnotsubset(x, y)\n\nTrue if x notsubset y in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Reductions","page":"API Reference","title":"Reductions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magsum\nmagprod\nmagreduceand\nmagreduceor\nmagreducejoin\nmagreducemeet\nmagreducecat","category":"page"},{"location":"reference/#MagmaCall.magsum","page":"API Reference","title":"MagmaCall.magsum","text":"magsum(x)\n\nEquivalent to &+ x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magprod","page":"API Reference","title":"MagmaCall.magprod","text":"magprod(x)\n\nEquivalent to &* x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magreduceand","page":"API Reference","title":"MagmaCall.magreduceand","text":"magreduceand(x)\n\nEquivalent to &and x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magreduceor","page":"API Reference","title":"MagmaCall.magreduceor","text":"magreduceor(x)\n\nEquivalent to &or x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magreducejoin","page":"API Reference","title":"MagmaCall.magreducejoin","text":"magreducejoin(x)\n\nEquivalent to &join x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magreducemeet","page":"API Reference","title":"MagmaCall.magreducemeet","text":"magreducemeet(x)\n\nEquivalent to &meet x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magreducecat","page":"API Reference","title":"MagmaCall.magreducecat","text":"magreducecat(x)\n\nEquivalent to &cat x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Containers","page":"API Reference","title":"Containers","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"maglist\nmagtuple\nmagseq\nmagset\nmagmset\nmagiset","category":"page"},{"location":"reference/#MagmaCall.maglist","page":"API Reference","title":"MagmaCall.maglist","text":"maglist([xs])\n\nA new Magma list, equivalent to [* *].\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magtuple","page":"API Reference","title":"MagmaCall.magtuple","text":"magtuple([xs])\n\nA new Magma tuple, equivalent to < >.\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magseq","page":"API Reference","title":"MagmaCall.magseq","text":"magseq([xs]; [universe])\n\nA new Magma sequence, equivalent to [ universe | ].\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magset","page":"API Reference","title":"MagmaCall.magset","text":"magset([xs]; [universe])\n\nA new Magma set, equivalent to { universe | }.\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magmset","page":"API Reference","title":"MagmaCall.magmset","text":"magmset([xs]; [universe])\n\nA new Magma multiset, equivalent to {* universe | *}.\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magiset","page":"API Reference","title":"MagmaCall.magiset","text":"magiset([xs]; [universe])\n\nA new Magma indexed set, equivalent to {@ universe | @}.\n\nOptionally, values can be specified with iterable xs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Constructors","page":"API Reference","title":"Constructors","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magrecformat\nmagrec","category":"page"},{"location":"reference/#MagmaCall.magrecformat","page":"API Reference","title":"MagmaCall.magrecformat","text":"magrecformat(field, ...)\n\nCreate a record format with the given fields.\n\nEach field may be a symbol, giving the name, or a name=>type pair.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magrec","page":"API Reference","title":"MagmaCall.magrec","text":"magrec(fmt; vals...)\n\nA record with the given format and values.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Other-operators","page":"API Reference","title":"Other operators","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magprint\nmagsprint\nmaggetindex\nmagsetindex!\nmaglength\nmagimage\nmagpreimage\nmagcoerce\nmaggen\nmaggetattr\nmagsetattr!\nmagattrnames\nmageval\nmaghelp\nmagassigned\nmagdelete","category":"page"},{"location":"reference/#MagmaCall.magprint","page":"API Reference","title":"MagmaCall.magprint","text":"magprint(io::IO, x, level=:default)\n\nPrint x to io at the given level, which must be one of :default, :magma, :maximal or :minimal.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsprint","page":"API Reference","title":"MagmaCall.magsprint","text":"magsprint(x, level=:default)\n\nString representation of x at the given level (see magprint).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maggetindex","page":"API Reference","title":"MagmaCall.maggetindex","text":"maggetindex(o, i, ...)\n\nEquivalent to o[i, ...] in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsetindex!","page":"API Reference","title":"MagmaCall.magsetindex!","text":"magsetindex!(o, x, i...)\n\nEquivalent to o[i, ...] := x in Magma.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maglength","page":"API Reference","title":"MagmaCall.maglength","text":"maglength(o)\n\nThe length of o, equivalent to # o.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magimage","page":"API Reference","title":"MagmaCall.magimage","text":"magimage(x, f)\n\nThe image of x under f, equivalent to x @ f.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magpreimage","page":"API Reference","title":"MagmaCall.magpreimage","text":"magpreimage(x, f)\n\nThe preimage of x under f, equivalent to x @@ f.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magcoerce","page":"API Reference","title":"MagmaCall.magcoerce","text":"magcoerce(s, x)\n\nCoerce x into structure s, equivalent to s ! x.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maggen","page":"API Reference","title":"MagmaCall.maggen","text":"maggen(x, n)\n\nThe nth generator of x, equivalent to x.n.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maggetattr","page":"API Reference","title":"MagmaCall.maggetattr","text":"maggetattr(x, k)\n\nGet attribute k from x, equivalent to x`k.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magsetattr!","page":"API Reference","title":"MagmaCall.magsetattr!","text":"magsetattr!(x, k, v)\n\nSet attribute k of x to v, equivalent to x`k := v.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magattrnames","page":"API Reference","title":"MagmaCall.magattrnames","text":"magattrnames(x)\n\nThe attribute names of x.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.mageval","page":"API Reference","title":"MagmaCall.mageval","text":"mageval(ex; vars...)\n\nEvaluate the Magma expression ex and return its value.\n\nKeyword arguments can be used to name variables refereced by ex, e.g. mageval(\"x+x\", x=3) returns 6.\n\nThis is the worker function behind @mag_str.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.maghelp","page":"API Reference","title":"MagmaCall.maghelp","text":"maghelp(query)\n\nEquivalent to ? query.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magassigned","page":"API Reference","title":"MagmaCall.magassigned","text":"magassigned(o::MagmaObject)\n\nTrue if o is assigned. This should only occur if o = MagmaObject() or if magdelete(o) has been called.\n\nMost functions do not expect unassigned values, and undefined behaviour occurs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magdelete","page":"API Reference","title":"MagmaCall.magdelete","text":"magdelete(o::MagmaObject)\n\nDelete the object referenced by o.\n\nMost functions do not expect deleted values, and undefined behaviour occurs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Other-helpers","page":"API Reference","title":"Other helpers","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"magtypeof\nmagetypeof\nmagissubtype\nmagisinstance","category":"page"},{"location":"reference/#MagmaCall.magtypeof","page":"API Reference","title":"MagmaCall.magtypeof","text":"magtypeof(o)\n\nThe Magma type of o.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magetypeof","page":"API Reference","title":"MagmaCall.magetypeof","text":"magetypeof(o)\n\nThe Magma extended type of o.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magissubtype","page":"API Reference","title":"MagmaCall.magissubtype","text":"magissubtype(t1, t2)\n\nTrue if Magma type t1 is a subtype of t2.\n\nSymbol arguments are interpreted as types.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagmaCall.magisinstance","page":"API Reference","title":"MagmaCall.magisinstance","text":"magisinstance(o, t)\n\nTrue if o is an instance of Magma type t.\n\nIf t is a Symbol, it is interpreted as a type.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Magma-values-and-conversion","page":"API Reference","title":"Magma values and conversion","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"MagmaValue\nMagmaObject\nMagmaRef\nMagmaExpr\nMagmaIntrinsic\nMagmaType\nMagmaCallable\nmagconvert","category":"page"},{"location":"reference/#MagmaCall.MagmaValue","page":"API Reference","title":"MagmaCall.MagmaValue","text":"MagmaValue <: Any\nMagmaValue(x)\n\nAbtract type for any kind of Magma value. Most functions accept any MagmaValue and return a MagmaObject.\n\nSubtypes include MagmaObject, MagmaRef, MagmaExpr.\n\nOverload MagmaValue(x) to provide conversions from Julia values to Magma ones.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaObject","page":"API Reference","title":"MagmaCall.MagmaObject","text":"MagmaObject <: MagmaValue\nMagmaObject(x)\n\nA Magma object value. Most functions return a MagmaObject.\n\nIt is represented by a handle to a variable in the Magma interpreter.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaRef","page":"API Reference","title":"MagmaCall.MagmaRef","text":"MagmaRef <: MagmaValue\nMagmaRef(o::MagmaObject)\n\nA reference to a Magma object, suitable for passing to mutating procedures such as Append or Sort.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaExpr","page":"API Reference","title":"MagmaCall.MagmaExpr","text":"MagmaExpr <: MagmaValue\nMagmaExpr(ex::String)\n\nA literal Magma value, represented by an expression which evaluates to the value.\n\nFor simple values such as integers and strings, MagmaValue(x) will return a MagmaExpr.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaIntrinsic","page":"API Reference","title":"MagmaCall.MagmaIntrinsic","text":"MagmaIntrinsic <: MagmaValue\nMagmaIntrinsic(name)\n\nThe Magma intrinsic with the given name.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaType","page":"API Reference","title":"MagmaCall.MagmaType","text":"MagmaType <: MagmaValue\nMagmaType(name, ...)\n\nThe Magma type with the given name.\n\nExtra arguments make an extended type, e.g. MagmaType(:RngUPol, :RngInt) is Magma's RngUPol[RngInt].\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.MagmaCallable","page":"API Reference","title":"MagmaCall.MagmaCallable","text":"MagmaCallable{C} <: MagmaValue\nMagmaCallable{C}(o)\n\nWrap the value o, declaring it to be callable with calling convention C (see magcall).\n\nThe resulting object can use the usual function call syntax, instead of magcall.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagmaCall.magconvert","page":"API Reference","title":"MagmaCall.magconvert","text":"magconvert(T, o)\n\nConvert the Magma object o to a T.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"@mag_str","category":"page"},{"location":"reference/#MagmaCall.@mag_str","page":"API Reference","title":"MagmaCall.@mag_str","text":"mag\"...\"[C]\n\nEvaluates the given string as a Magma expression.\n\nJulia values may be interpolated with $ as usual.\n\nIf C is given, the returned value is wrapped as a MagmaCallable{C}, for example:\n\nf = mag\"func<x, y | x^2 + 3*x*y + y^2>\"f\nf(2, 3)\n\n\n\n\n\n","category":"macro"},{"location":"#MagmaCall.jl","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"","category":"section"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"MagmaCall.jl makes it easy to call the Magma computer algebra system from Julia.","category":"page"},{"location":"#Example","page":"MagmaCall.jl","title":"Example","text":"","category":"section"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"julia> using MagmaCall\n\njulia> Q = magf.Rationals() # Properties of `magf` are intrinsic functions (and auto-completion is supported)\nRational Field :: MagmaObject\n\njulia> R, x = magg.PolynomialRing(:x, Q); # `magg` additionally names and returns generators\n\njulia> R\nUnivariate Polynomial Ring in x over Rational Field :: MagmaObject\n\njulia> x\nx :: MagmaObject\n\njulia> f = x^2 - 3x + 2\nx^2 - 3*x + 2 :: MagmaObject\n\njulia> facs = magf.Factorization(f)\n[\n    <x - 2, 1>,\n    <x - 1, 1>\n]\n:: MagmaObject\n\njulia> list = maglist() # Also `magseq`, `magset`, etc.\n[* *] :: MagmaObject\n\njulia> magp.Append(MagmaRef(list), \"foo\") # Use `magp` for procedure calls, `MagmaRef` to pass references\n\njulia> magp1.Append(list, \"bar\") # Shorthand for the above, `magpN` passes the `N`th argument by reference\n\njulia> list\n[* foo, bar *] :: MagmaObject","category":"page"},{"location":"#Install","page":"MagmaCall.jl","title":"Install","text":"","category":"section"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"pkg> add https://github.com/cjdoris/MagmaCall.jl","category":"page"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"You need to have Magma already installed, with the magma executable in your PATH.","category":"page"},{"location":"#Caveat","page":"MagmaCall.jl","title":"Caveat","text":"","category":"section"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"This package is SLOW, each operation takes around 1ms. Hence this package is most suitable for interactive use and high-level control.","category":"page"},{"location":"","page":"MagmaCall.jl","title":"MagmaCall.jl","text":"If you need to write any tight loops, write the whole loop in Magma. Instead of magseq(magf.GF(p) for p in magf.PrimesUpTo(N)) do mag\"[GF(p) : p in PrimesUpTo($N)]\" (which is 100 times faster).","category":"page"}]
}
